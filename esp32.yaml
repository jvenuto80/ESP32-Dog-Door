substitutions:
  name: "dog-door"
  friendly_name: dog-door

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: '1.0'

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging with reduced verbosity
logger:
  level: INFO
  logs:
    esp32_ble_tracker: INFO
    ble_client: INFO

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
  platform: esphome

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# Sets up Bluetooth LE for provisioning
esp32_improv:
  authorizer: none

web_server:

# BLE tracker for dog tag
esp32_ble_tracker:
  scan_parameters:
    interval: 100ms
    window: 100ms
    active: true

binary_sensor:
  - platform: ble_presence
    mac_address: "DD:34:02:0A:47:D2"
    name: "Dog Tag Presence"
  - platform: gpio
    pin: 
      number: GPIO5
      mode: INPUT_PULLUP
    name: "Dog Door State"
    id: door_state_sensor
    device_class: door
    filters:
      - delayed_on: 50ms
      - delayed_off: 50ms

sensor:
  - platform: ble_rssi
    mac_address: "DD:34:02:0A:47:D2"
    name: "Dog Tag RSSI"

  - platform: adc
    pin: GPIO35
    name: "Battery Voltage"
    id: battery_voltage
    update_interval: 600s
    attenuation: 11db
    filters:
      - multiply: 3.01538461

  - platform: template
    name: "Battery Percentage"
    lambda: |-
      float voltage = id(battery_voltage).state;
      if (voltage >= 4.2) return 100.0;
      if (voltage <= 3.0) return 0.0;
      return (voltage - 3.0) / (4.2 - 3.0) * 100.0;
    update_interval: 300s
    unit_of_measurement: "%"
    accuracy_decimals: 1
    

# Motor control
output:
  - platform: gpio
    pin: GPIO12
    id: motor_direction1
  - platform: gpio
    pin: GPIO13
    id: motor_direction2
  - platform: ledc
    pin: GPIO14
    id: motor_enable
    frequency: 2000Hz

fan:
  - platform: speed
    output: motor_enable
    name: "Dog Door Motor"
    id: dog_door_motor
    speed_count: 2

# Dog door cover
cover:
  - platform: template
    name: "Dog Door"
    device_class: gate
    open_action:
      - if:
          condition:
            switch.is_off: prevent_opening
          then:
            - output.turn_on: motor_direction1
            - output.turn_off: motor_direction2
            - fan.turn_on:
                id: dog_door_motor
                speed: 2
          else:
            - logger.log: "Door opening prevented by switch"
    close_action:
      - output.turn_off: motor_direction1
      - output.turn_on: motor_direction2
      - fan.turn_on:
          id: dog_door_motor
          speed: 2
    stop_action:
      - fan.turn_off: dog_door_motor
      - output.turn_off: motor_direction1
      - output.turn_off: motor_direction2
    lambda: |-
      if (id(prevent_opening).state && id(door_state_sensor).state) {
        return COVER_OPEN;
      } else if (id(door_state_sensor).state) {
        return COVER_OPEN;
      } else {
        return COVER_CLOSED;
      }

# Prevent door opening switch
switch:
  - platform: template
    name: "Prevent Dog Door Opening"
    id: prevent_opening
    optimistic: true
    turn_on_action:
      - logger.log: "Dog door opening prevention enabled"
    turn_off_action:
      - logger.log: "Dog door opening prevention disabled"
