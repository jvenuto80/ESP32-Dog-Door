substitutions:
  name: esphome-web-315e34
  friendly_name: dog-door

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: '1.0'

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging with reduced verbosity
logger:
  level: INFO
  logs:
    esp32_ble_tracker: INFO
    ble_client: INFO

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
  platform: esphome

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# Sets up Bluetooth LE for provisioning
esp32_improv:
  authorizer: none

web_server:

# BLE tracker configuration with increased scan frequency
esp32_ble_tracker:
  scan_parameters:
    interval: 100ms  # Increase scan frequency by decreasing interval
    window: 100ms    # Increase active scan time by matching window to interval
    active: true

# Define the iBeacon to track
binary_sensor:
  - platform: ble_presence
    mac_address: "xx:xx:xx:xx:xx:xx"
    name: "Dog Tag Presence"
    id: dog_tag_presence

  - platform: gpio
    pin: 
      number: GPIO5
      mode: INPUT_PULLUP
    name: "Dog Door State"
    id: door_state_sensor
    device_class: door
    filters:
      - delayed_on: 50ms
      - delayed_off: 50ms

# RSSI sensor
sensor:
  - platform: ble_rssi
    mac_address: "xx:xx:xx:xx:xx:xx"
    name: "Dog Tag RSSI"
    id: dog_tag_rssi
    filters:
      - sliding_window_moving_average:
          window_size: 5
          send_every: 1
      - throttle: 1s  # Reduce throttle time to allow more frequent updates
    on_value:
      then:
        - logger.log:
            format: "Dog Tag RSSI updated: %.1f dBm"
            args: ["x"]

# GPIO for motor control
cover:
  - platform: template
    name: "Dog Door"
    device_class: gate
    open_action:
      - switch.turn_on: dog_door_motor
    close_action:
      - switch.turn_off: dog_door_motor
    stop_action:
      - switch.turn_off: dog_door_motor
    optimistic: false
    assumed_state: false
    lambda: |-
      if (id(door_state_sensor).state) {
        return COVER_OPEN;
      } else {
        return COVER_CLOSED;
      }

# Motor control
switch:
  - platform: gpio
    pin: GPIO12
    id: dog_door_motor
    internal: true

  # Override switch to prevent door opening
  - platform: template
    name: "Prevent Dog Door Opening"
    id: prevent_opening
    optimistic: true
